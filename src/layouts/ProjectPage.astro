---
import Layout from "../layouts/Layout.astro"

import { Image } from 'astro:assets';

import {videoTypes} from '../const.js'

import EmbeddedMp4Gif from '../components/media/Mp4Gif.astro'
import EmbeddedVideo from '../components/media/Video.astro'

interface Video {
	src: string;
    type: string
}

interface Link {
	url: string;
    type: string
}

import '../styles/project-card-page.css';
import { Icon } from "astro-icon/components";

const { title, description, project } = Astro.props;

const randomlySortedImages = project.images.reverse().sort((a, b) => 0.5 - Math.random())
---
<Layout title={title} description={description}>
    <main>
        <div class="project-card">
            
            <hr class="horizontal-line-large">
            
            <div class="header-container">
                <small class="home-link-wrapper">
                    <a class="home-link" href="/">Home</a>
                    <span class="copyright-label-mobile">&copy; <span class="copyright-year">2024</span></span>
                </small>
                <small class="project-header-label">{project.title} / {project.type} / {project.artist}</small>
                <small class="copyright-label">&copy; <span class="copyright-year">2024</span></small>
            </div>
            <hr class="horizontal-line-small">

            {project.videos.length > 1 ? 
                <div class="videos-container top-video-container">
                    {project.videos.map((video: Video) =>
                        (video.type === videoTypes.external) ? 
                            <EmbeddedVideo src={video.src} />
                        : (video.type === videoTypes.mp4Gif) ? 
                            <EmbeddedMp4Gif src={video.src} />
                        : null
                    )}
                </div> 
            : null }

            <div class="project-container">
                <div class="project-info">
                    {project.videos.length==1 ? 
                        <div class="videos-container">
                            {project.videos.map((video: Video) =>
                                (video.type === videoTypes.external) ? 
                                    <EmbeddedVideo src={video.src} />
                                : (video.type === videoTypes.mp4Gif) ? 
                                    <EmbeddedMp4Gif src={video.src} />
                                : null
                            )}
                        </div> 
                        : null
                    }
                    <div class="description">
                        <h1 class="project-title">{project.title}</h1>
                        <slot />
                        <ul class="additional-links-list">
                            {project.links.map((link: Link) => {
                                return <li><a target="_blank" class="additional-link" href={link.url}>{link.type}</a></li>
                            })}
                        </ul>
                        
                    </div>
                    
                </div>
            
                <div class="image-container">
                    <div class="image-wrapper columns-1">
                        {project.images.map((image: ImageMetadata) =>
                            <Image src={image} alt={`Project Image`} class="project-image" />
                        )}
                        {project.images.map((image: ImageMetadata) =>
                            <Image src={image} alt={`Project Image`} class="project-image duplicate" />
                        )}
                    </div>  
                    
                    <div class="image-wrapper columns-2">
                        <!-- Check if there are videos -->
                        {randomlySortedImages.slice(0).reverse().map((image: ImageMetadata) =>
                            <Image src={image} alt={`Project Image`} class="project-image duplicate" />
                        )}
                        {randomlySortedImages.slice(0).reverse().map((image: ImageMetadata) =>
                            <Image src={image} alt={`Project Image`} class="project-image duplicate" />
                        )}
                    </div>

                </div>
            </div>
        </div>

        <script>
            /* Image viewer */
            document.addEventListener("DOMContentLoaded", () => {    
                // variables
                const images = document.querySelectorAll(".project-image:not(.duplicate)")
                const imageList = Array.from(images).map(image => (image as HTMLImageElement).src)

                let touchstartX = 0;
                let touchstartY = 0;
                let touchendX = 0;
                let touchendY = 0;

                const minimumTouchDistance = 100;

                // functions
                function setNewImageInModal({imageSrc}){
                    const imageWrapper = document.querySelector(".modal--image-wrapper")
                    if (imageWrapper === null) {
                        console.error("ERROR: Could not find modal-image-wrapper")
                        return
                    }

                    imageWrapper.innerHTML = `
                        <img src="${imageSrc}">
                    `
                }

                function closeModal(){
                    const modal = document.querySelector(".modal")
                        modal?.classList.add("fade-out")

                        setTimeout(() => {
                            modal?.classList.remove("fade-out")
                            modal?.classList.remove("show")
                        }, 500)      
                }

                function getCurrentImageIndex() {
                    const currentImage = document.querySelector(".modal--image-wrapper img")

                    return (currentImage !== null) 
                        ? imageList.indexOf((currentImage as HTMLImageElement).src) 
                        : 0
                }

                function loadPreviousImage(){
                    const index = getCurrentImageIndex()

                    let previousIndex = (index === 0) ? imageList.length - 1 : index - 1

                    setNewImageInModal({imageSrc: imageList[previousIndex]})
                }

                function loadNextImage(){
                    const index = getCurrentImageIndex()
                    
                    let nextIndex = (index === imageList.length - 1) ? 0 : index + 1

                    setNewImageInModal({imageSrc: imageList[nextIndex]})
                }
                
                // add event listeners    
                document.querySelectorAll('.image-wrapper .project-image').forEach(image => {
                    image.addEventListener("click", (event) => {
                        document.querySelector(".modal")?.classList.add("show")

                        const currentTarget = event.currentTarget as HTMLImageElement

                        if (currentTarget === null){
                            console.error("ERROR: Could not find target image")
                            return
                        }

                        setNewImageInModal({imageSrc: currentTarget.src})
                    })
                })
                
                document.querySelector(".modal--previous")?.addEventListener("click", () => {
                    loadNextImage()
                })
                document.querySelector(".modal--next")?.addEventListener("click", () => {
                    loadPreviousImage()
                })

                document.querySelector(".modal")?.addEventListener("touchstart", (event: TouchEvent) => {                    
                    const touchLocation = event.targetTouches[0];
                    touchstartX = touchLocation.screenX;
                    touchstartY = touchLocation.screenY;

                    touchendX = 0;
                    touchendY = 0;
                }, false)

                document.querySelector(".modal")?.addEventListener("touchend", (event: TouchEvent) => {
                    const touchLocation = event.changedTouches[0];
                    touchendX = touchLocation.screenX;
                    touchendY = touchLocation.screenY;

                    const distanceX = touchendX - touchstartX
                    const distanceY = touchendY - touchstartY

                    if (distanceX < 0 && Math.abs(distanceX) > minimumTouchDistance){
                        // swipe left
                        loadPreviousImage()
                    } else if (distanceX > 0 && Math.abs(distanceX) > minimumTouchDistance){
                        // swipe left
                        loadNextImage()
                    } else if (Math.abs(distanceY) > minimumTouchDistance) {
                        // swipe up or down
                        closeModal()
                    }
                }, false)

                document.querySelector(".modal")?.addEventListener("touchcancel", () => {
                    // reset touch recorded points
                    touchstartX = 0;
                    touchstartY = 0;
                    touchendX = 0;
                    touchendY = 0;
                }, false)

                document.querySelector(".modal--close")?.addEventListener("click", () => {
                    closeModal()    
                })
            })
        </script>

        <script>
            const prefersReducedMotion = window.matchMedia(`(prefers-reduced-motion: reduce)`).matches === true;

            /* Adjust image animation speed so that the image scroll on all pages in the 
            same speed independent of the number of images in the container */
            document.querySelectorAll(".image-wrapper").forEach((container: HTMLElement, index: number) => {
                /* pixels per second + offset so that each column has a slightly
                * different speed
                */
                const baseSpeed = prefersReducedMotion ? 50 : 100

                const speed = baseSpeed + 20 * index;

                const duration = container.scrollHeight / speed; // seconds

                // Set the animation duration dynamically
                container.style.animationDuration = `${duration}s`;
                console.log(container.style.animationDuration)
            })
        </script>
        
        <script src="../scripts/copyright-year-updater.js"></script>

        <div class="modal">
            <div class="modal--content">
                <div class="modal--navigation modal--navigation-top">
                    <button class="modal--close" aria-label="close modal">Close</button>
                </div>

                <div class="modal--image-wrapper">

                </div>

                <div class="modal--navigation modal--navigation-bottom">
                    <div class="modal--next-previous-buttons">
                        <button class="modal--previous" aria-label="next image"><Icon name="mdi:arrow-left" /></button>
                        <button class="modal--next" aria-label="next image"><Icon name="mdi:arrow-right" /></button>
                    </div>
                </div>
            </div>
        </div>
    </main>
</Layout>